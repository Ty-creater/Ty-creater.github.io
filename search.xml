<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hibernate的配置与使用</title>
      <link href="/2020/03/22/Hibernate%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/22/Hibernate%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h1><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行。</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>对象关系映射（英语：Object Relation Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><h2 id="Hibernate优势"><a href="#Hibernate优势" class="headerlink" title="Hibernate优势"></a>Hibernate优势</h2><ul><li>Hibernate对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。</li><li>Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现，它很大程度的简化了dao层编码工作。</li></ul><h1 id="Hibernate配置"><a href="#Hibernate配置" class="headerlink" title="Hibernate配置"></a>Hibernate配置</h1><h2 id="Hibernate配置文件"><a href="#Hibernate配置文件" class="headerlink" title="Hibernate配置文件"></a>Hibernate配置文件</h2><p>实现Hibernate基础配置，是Hibernate能够友好的与DB进行交互基础；<br>开发时放置src目录下,取名为：hibernate.cfg.xml(hibernate.properties)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hibernate配置文件的DTD信息 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hibernate- configuration是连接配置文件的根元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置一：数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库所用的驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的url，hibernate连接的数据库名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/shopping?characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置二:数据库方言配置，配置数据库方言的作用是屏蔽数据库的差异，换句话说是使hibernate框架知道 要与哪种数据库取得联系（可以省略，但建议配置） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置三：其它配置 （这些配置可选） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否在控制台显示sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--是否格式化删除sql语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动生成数据表（数据表的生成方式） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        create：先删除数据表然后再创建表  </span></span><br><span class="line"><span class="comment">        update：表不存在就创建，内容不一样就更新。</span></span><br><span class="line"><span class="comment">        create-drop：初始化时创建数据表（每次加载主配置文件时生成表），sessionfactory close时删除。  </span></span><br><span class="line"><span class="comment">        validate：验证表结构是否一致（每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将session绑定到当前线程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置事务的隔离级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置四：映射配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 罗列所有的映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"映射文件路径/News.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基于注解的配置方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.sz.entity.Dept"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hibernate映射文件"><a href="#Hibernate映射文件" class="headerlink" title="Hibernate映射文件"></a>Hibernate映射文件</h2><p>实现POJO与DB表格的映射配置；为了维护方便一般将其放置和相对应的POJO同一目录下，取名为POJOName.hbm.xml。虽然一个映射文件中可以配置多个POJO与数据库表的映射关系但是还是建议一个映射文件中只配置一个POJO与数据库表的映射关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span> </span></span><br><span class="line"><span class="meta">    <span class="meta-string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;hibernate-mapping&gt;一般不去配置，采用默认即可。</span></span><br><span class="line"><span class="comment">    schema:指定映射数据库的schema(模式/数据库)，如果指定该属性，则表名会自动添加该schema前缀。</span></span><br><span class="line"><span class="comment">    package:指定包前缀 指定持久化类所在的包名 这样之后calss子元素中就不必使用全限定性的类名。</span></span><br><span class="line"><span class="comment">    default-cascade="none"：默认的级联风格，表与表联动。</span></span><br><span class="line"><span class="comment">    default-lazy="true"：默认延迟加载。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;class&gt;：使用class元素定义一个持久化类。</span></span><br><span class="line"><span class="comment">        name="cn.javass.user.vo.UserModel"：持久化类的java全限定名；</span></span><br><span class="line"><span class="comment">        table="tbl_user"：对应数据库表名，默认持久化类名作为表名；</span></span><br><span class="line"><span class="comment">        proxy:指定一个接口，在延迟装载时作为代理使用，也可在这里指定该类自己的名字。</span></span><br><span class="line"><span class="comment">        mutable="true"：默认为true，设置为false时则不可以被应用程序更新或删除，等价于所有&lt;property&gt;元素的update属性为false，表示整个实例不能被更新。</span></span><br><span class="line"><span class="comment">        dynamic-insert="false"：默认为false，动态修改那些有改变过的字段，而不用修改所有字段；</span></span><br><span class="line"><span class="comment">        dynamic-update="false"：默认为false，动态插入非空值字段；</span></span><br><span class="line"><span class="comment">        select-before-update="false"：默认为false，在修改之前先做一次查询，与用户的值进行对比，有变化都会真正更新；</span></span><br><span class="line"><span class="comment">        optimistic-lock="version"：默认为version(检查version/timestamp字段)，取值：all(检查全部字段)、dirty(只检查修改过的字段)；</span></span><br><span class="line"><span class="comment">        none(不使用乐观锁定)，此参数主要用来处理并发，每条值都有固定且唯一的版本，版本为最新时才能执行操作；如果需要采用继承映射，则class元素下还会增加&lt;subclass.../&gt;元素等用于定义子类。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.javass.user.vo.UserModel"</span> <span class="attr">table</span>=<span class="string">"tbl_user"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            &lt;id&gt;：定义了该属性到数据库表主键字段的映射。</span></span><br><span class="line"><span class="comment">            type  指定该标识属性的数据类型，该类型可以是Hibernate的内建类型，也可以是java类型，如果是java类型则需要使用全限定类名（带包名）。该属性可选，如果没有指定类型， 则hibernate自行判断该标识属性数据类型。通常建议设定。</span></span><br><span class="line"><span class="comment">            name="userId"：标识属性的名字；</span></span><br><span class="line"><span class="comment">            column="userId"：表主键字段的名字，如果不填写与name一样；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"userId"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                &lt;generator&gt;：指定主键由什么生成，推荐使用uuid，assigned指用户手工填入。设定标识符生成器适应代理主键的有：</span></span><br><span class="line"><span class="comment">                increment：有Hibernat自动以递增的方式生成标识符，每次增量1；</span></span><br><span class="line"><span class="comment">                identity：由底层数据库生成标识符，前提条件是底层数据库支持自动增长字段类型。（DB2,MYSQL）</span></span><br><span class="line"><span class="comment">                uuid:用128位的UUID算法生成字符串类型标识符。</span></span><br><span class="line"><span class="comment">                适应自然主键：assigned:由java程序负责生成标识符，为了能让java应用程序设置OID,不能把setId（）方法设置成private类型。</span></span><br><span class="line"><span class="comment">                让应用程序在save()之前为对象分配一个标识符。相当于不指定&lt;generator.../&gt;元素时所采用的默认策略。应当尽量避免自然主键</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"uuid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            &lt;version/&gt;：使用版本控制来处理并发，要开启optimistic-lock="version"和dynamic-update="true"。</span></span><br><span class="line"><span class="comment">            name="version"：持久化类的属性名，column="version"：指定持有版本号的字段名；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> <span class="attr">name</span>=<span class="string">"version"</span> <span class="attr">column</span>=<span class="string">"version"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            &lt;property&gt;：为类定义一个持久化的javaBean风格的属性。</span></span><br><span class="line"><span class="comment">            name="name"：标识属性的名字，以小写字母开头；</span></span><br><span class="line"><span class="comment">            column="name"：表主键字段的名字，如果不填写与name一样；</span></span><br><span class="line"><span class="comment">            update="true"/insert="true"：默认为true，表示可以被更新或插入；</span></span><br><span class="line"><span class="comment">            access="property/field"：指定Hibernate访问持久化类属性的方式。默认property。property表示使用setter/getter方式。field表示运用java反射机制直接访问类的属性。</span></span><br><span class="line"><span class="comment">            formula="&#123;select。。。。。&#125;"：该属性指定一个SLQ表达式，指定该属性的值将根据表达式类计算，计算属性没有和它对应的数据列。</span></span><br><span class="line"><span class="comment">            formula属性允许包含表达式：sum,average,max函数求值的结果。</span></span><br><span class="line"><span class="comment">            例如：formula="(select avg(p.price) from Product P)"</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            组件映射：把多个属性打包在一起当一个属性使用，用来把类的粒度变小。</span></span><br><span class="line"><span class="comment">            &lt;component name="属性，这里指对象"&gt;</span></span><br><span class="line"><span class="comment">                 &lt;property name="name1"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">                 &lt;property name="name2"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">             &lt;/component&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">             &lt;join&gt;:一个对象映射多个表，该元素必须放在所有&lt;property&gt;之后。</span></span><br><span class="line"><span class="comment">             &lt;join table="tbl_test：子表名"&gt;</span></span><br><span class="line"><span class="comment">             &lt;key column="uuid：子表主键"&gt;&lt;/key&gt;</span></span><br><span class="line"><span class="comment">             &lt;property name="name1：对象属性" column="name：子表字段"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">         &lt;/join&gt;</span></span><br><span class="line"><span class="comment">          --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Hibernate使用步骤"><a href="#Hibernate使用步骤" class="headerlink" title="Hibernate使用步骤"></a>Hibernate使用步骤</h1><h2 id="创建configuration对象"><a href="#创建configuration对象" class="headerlink" title="创建configuration对象"></a>创建configuration对象</h2><p><code>Configuration cfg = new Configuration();</code></p><h2 id="加载hibernate-cfg-xml"><a href="#加载hibernate-cfg-xml" class="headerlink" title="加载hibernate.cfg.xml"></a>加载hibernate.cfg.xml</h2><p><code>cfg.configure(&quot;/hibernate.cfg.xml&quot;);</code>    </p><h2 id="通过cfg创建会话工厂"><a href="#通过cfg创建会话工厂" class="headerlink" title="通过cfg创建会话工厂"></a>通过cfg创建会话工厂</h2><p><code>SessionFactory factory = cfg.buildSessionFactory();</code></p><h2 id="从工厂中获取session连接"><a href="#从工厂中获取session连接" class="headerlink" title="从工厂中获取session连接"></a>从工厂中获取session连接</h2><p><code>Session session = factory.openSession();</code></p><p>前四部可以简化：</p><ul><li><code>SessionFactory factory = new Configuration().configure().buildSessionFactory();</code></li><li><code>Session session = factory.openSession();</code></li></ul><h2 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h2><p>（1）插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Product p = <span class="keyword">new</span> Product();<span class="comment">//映射数据库的实体类Product</span></span><br><span class="line">p.setName(<span class="string">"属性值"</span>)<span class="comment">//name是Product类中的属性</span></span><br><span class="line">session.save(p);</span><br></pre></td></tr></table></figure><p>（2）查找一个对象（通过主键，此处为id）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get方法</span></span><br><span class="line">Product p =(Product) session.get(Product<span class="class">.<span class="keyword">class</span>, 6)</span>;<span class="comment">//id=6的Product</span></span><br><span class="line"><span class="comment">//load方法</span></span><br><span class="line">Product p = (Product) session.load(Product<span class="class">.<span class="keyword">class</span>, 6)</span>;</span><br><span class="line"><span class="comment">//区别：</span></span><br><span class="line"><span class="comment">//1. 延迟加载  load方式是延迟加载，只有属性被访问的时候才会调用sql语句  get方式是非延迟加载，无论后面的代码是否会访问到属性，马上执行sql语句</span></span><br><span class="line"><span class="comment">//2. 对于id不存在的时候的处理  get方式会返回null  load方式会抛出异常</span></span><br></pre></td></tr></table></figure><p>（3）删除一个对象（hibernate在删除一条数据之前，先要通过id把这条记录取出来）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Product p =(Product) session.get(Product<span class="class">.<span class="keyword">class</span>, 6)</span>;</span><br><span class="line">session.delete(p);</span><br></pre></td></tr></table></figure><p>（4）更新一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Product p =(Product) session.get(Product<span class="class">.<span class="keyword">class</span>, 6)</span>;</span><br><span class="line">p.setName(<span class="string">"pencil"</span>);</span><br><span class="line">session.update(p);</span><br></pre></td></tr></table></figure><p>插入，删除，更新三个操作需要开启事务，openSession查询时候不需要事务，但是getCurrentSession所有操作都必须放在事务中，而且getCurrentSession在提交事务后，session自动关闭。</p><p>开启事务 ：<code>session.beginTransaction();</code></p><p>最后关闭之前提交事务:<code>session.getTransaction().commit();</code></p><p>规范写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">Session session = <span class="keyword">null</span>;</span><br><span class="line">Transaction tx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    factory = <span class="keyword">new</span> Configuration().configure().buildSessionFactory();</span><br><span class="line">    session = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    tx = session.beginTransaction();</span><br><span class="line">        </span><br><span class="line"> <span class="comment">//执行操作</span></span><br><span class="line"> ........   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    tx.commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//回滚事务</span></span><br><span class="line">        tx.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭操作</span></span><br><span class="line">        session.close();</span><br><span class="line">        factory.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保证就算程序出错，也能够通过 finally中的代码关闭释放资源。</span></span><br></pre></td></tr></table></figure><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><ul><li><code>(session.close();</code></li><li><code>factory.close();</code></li></ul><h1 id="Hibernate查询"><a href="#Hibernate查询" class="headerlink" title="Hibernate查询"></a>Hibernate查询</h1><h2 id="HQL"><a href="#HQL" class="headerlink" title="HQL"></a>HQL</h2><p>HQL（Hibernate Query Language）是hibernate专门用于查询数据的语句，有别于SQL，HQL 更接近于面向对象的思维方式。</p><p>1.首先根据hql创建一个Query对象</p><p><code>Query q =session.createQuery(&quot;from Product p where p.name like ?&quot;);</code></p><p>使用hql的时候，不需要在前面加<code>select*</code>,并且用的是类名,而不是表名。</p><p>2.设置参数</p><p><code>q.setString(0, &quot;%&quot;+name+&quot;%&quot;);</code></p><p>name为String参数,和基1的<code>PreparedStatement</code>不一样，Query是基0的.</p><p>3.通过Query对象的list()方法</p><p><code>List&lt;Product&gt; ps= q.list();</code></p><p>例子：取表中的记录条数</p><ul><li><code>Query q =session.createQuery(&quot;select count(*) from Student&quot;);</code></li><li><code>num=((Long) q.iterate().next()).intValue();</code></li></ul><p>从Hibernate 3.0.x/3.1.x升级到最新的3.2版之后，3.2版的很多sql函数如count(), sum()的唯一返回值已经从Integer变为Long，如果不升级代码，会得到一个ClassCastException。</p><p>$\color{rgb(255,0,0)}{Exception in thread “main” java.lang.ClassCastException: }$</p><p>$\color{rgb(255,0,0)}{java.lang.Long cannot be cast to java.lang.Integer}$</p><p>值得注意的是：limit在hql中不能使用，并设置查询出来集合的数目，我们应该使用setMaxResults(e)方法来解决。设置一个从第几条开始取，另一个是取的长度。</p><ul><li><code>query.setFirstResult(s);</code></li><li><code>query.setMaxResults(e);</code></li></ul><h2 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h2><p>Criteria完全是面向对象的方式在进行数据查询</p><p>1.通过session的createCriteria创建一个Criteria 对象</p><p><code>Criteria c= session.createCriteria(Product.class);</code></p><p>2.Criteria.add 增加约束</p><p><code>c.add(Restrictions.like(&quot;name&quot;, &quot;%&quot;+name+&quot;%&quot;));</code></p><p>3.调用list()方法返回查询结果的集合</p><p><code>List&lt;Product&gt; ps = c.list();</code></p><p>Criteria 还可以很方便的进行进行<strong>分页查询</strong>和<strong>获取总数</strong></p><p>分页查询，方法与HQL一样</p><div class="table-container"><table><thead><tr><th>序  列</th><th>方法描述</th></tr></thead><tbody><tr><td></td><td><code>public Criteria setFirstResult(int firstResult)</code>，这种方法需要一个代表你的结果集的第一行的整数，以第 0 行为开始。</td></tr><tr><td>2</td><td><code>public Criteria setMaxResults(int maxResults)</code>，这个方法设置了 Hibernate 检索对象的<strong>maxResults</strong>。</td></tr></tbody></table></div><p>获取总数</p><ul><li><code>Query q =s.createQuery(&quot;select count(*) from Product&quot;);</code></li><li><code>long total= (Long) q.uniqueResult();</code></li></ul><h2 id="标准的SQL"><a href="#标准的SQL" class="headerlink" title="标准的SQL"></a>标准的SQL</h2><ul><li><code>Query q= s.createSQLQuery(sql);</code></li><li><code>List&lt;Object[]&gt; list= q.list();</code></li></ul><p>因为标准SQL语句有可能返回各种各样的结果，比如多表查询，分组统计结果等等。 不能保证其查询结果能够装进一个Product对象中，所以返回的集合里的每一个元素是一个对象数组。 然后再通过下标把这个对象数组中的数据取出来。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没有什么东西是十全十美的。Hibernate可以让你写的代码适配于不同的数据库，它会自己生成sql语句。这样一来，我们就不用再挣扎数据库里的操作了，更专注业务逻辑、数据关系、对象关系。Hibernate就像一把双刃剑，它的劣势也是因为它的优势所带来的，由于封装了sql语句的操作，我们就没办法使用数据库特有的功能，也没办法按照自己的逻辑写sql语句，当然我们自己写不见得会有多好。并且它对业务逻辑模型和数据库模型互相依赖的程序太高了，很难维持这种仅仅耦合的关系。所以在debug的时候会很难。也许就像他们说的“改代码比改配置文件容易”。</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyInstaller安装和使用教程</title>
      <link href="/2020/03/16/PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/03/16/PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PyInstalle的功能"><a href="#PyInstalle的功能" class="headerlink" title="PyInstalle的功能"></a>PyInstalle的功能</h1><p>在创建了独立应用（自包含该应用的依赖包）之后，还可以使用 PyInstaller 将 Python 程序生成可直接运行的程序，这个程序就可以被分发到对应的 Windows 或 Mac OS X 平台上运行。</p><h1 id="安装-PyInstalle"><a href="#安装-PyInstalle" class="headerlink" title="安装 PyInstalle"></a>安装 PyInstalle</h1><p>安装 PyInstaller 模块与安装其他 Python 模块一样，使用 pip 命令安装即可。在命令行输入如下命令：</p><p><code>pip install pyinstaller</code></p><p>但是在国内使用pip在线安装的方式实在是太慢了，不仅浪费时间，还有可能报超时的错误，就像这样：</p><p>raise ReadTimeoutError(self._pool, None, “Read timed out.”)<br>pip._vendor.urllib3.exceptions.ReadTimeoutError:<br>HTTPSConnectionPool(host=’files<br>.pythonhosted.org’, port=443): Read timed out.</p><p>为了愉快的下载，我们可以把PIP安装源替换成国内镜像，这样一来就可以大幅提升下载速度，还可以提高安装成功率。</p><p>国内源：</p><ul><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple</a></li><li>华中理工大学：<a href="http://pypi.hustunique.com" target="_blank" rel="noopener">http://pypi.hustunique.com</a></li><li>山东理工大学：<a href="http://pypi.sdutlinux.org" target="_blank" rel="noopener">http://pypi.sdutlinux.org</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></li></ul><p>使用方法：</p><p>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyinstaller</code></p><p>运行上面命令，应该看到如下输出结果：</p><p><code>Successfully installed pyinstaller-x.x.x</code></p><p>安装目录就在你python安装下的$\color{blue}{Scripts}$文件夹下。</p><p>我在安装的时候遇到了个小插曲：</p><p>WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.<br>You should consider upgrading via the ‘python -m pip install—upgrade pip’ command.</p><p>这里报的错误就是PIP要更新才能进行pyinstaller的安装，只需在安装第三方库前更新PIP就可以。</p><p><code>python -m pip install --upgrade pip</code></p><h1 id="PyInstaller-常用选项"><a href="#PyInstaller-常用选项" class="headerlink" title="PyInstaller 常用选项"></a>PyInstaller 常用选项</h1><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">-h</td><td style="text-align:left">查看帮助</td></tr><tr><td style="text-align:left">—clean</td><td style="text-align:left">清理打包过程中的临时文件</td></tr><tr><td style="text-align:left">-D，—onedir</td><td style="text-align:left">默认值，生成dist文件夹</td></tr><tr><td style="text-align:left">-F，-onefile</td><td style="text-align:left">在dist文件夹中只生成独立的打包文件</td></tr><tr><td style="text-align:left">-i&lt;图标文件名.ico&gt;</td><td style="text-align:left">指定打包程序使用的图标（icon）文件</td></tr></tbody></table></div><h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><p>用命令行工具cmd进入到要做成exe的文件目录下，执行如下命令：</p><p><code>pyinstaller -i cool.ico -F KochDraw.py</code></p><p>cool.ico是文件生成所用的图标，KochDraw.py是用turtle画的科赫雪花python文件。</p><p><img src="1.png" alt="1"></p><p><img src="2.png" alt="2"></p><p>在上面命令中使用了-F 选项，该选项指定生成单独的 EXE 文件，因此，在 dist 目录下生成了一个单独的KochDraw.exe 文件；与 -F 选项对应的是 -D 选项（默认选项），该选项指定生成一个目录（包含多个文件）来作为程序。</p><p><img src="3.png" alt="3"></p><p>效果如下：</p><p><img src="4.png" alt="4"></p><p>Python也可以用作后端开发，但是相比于php和java，python在开发效率上并没有大幅度提升。因此，php和java还是霸占着后端编程领域。不过呢，也是可以去试一试的。</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议学习小记</title>
      <link href="/2020/03/11/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2020/03/11/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="协议概念"><a href="#协议概念" class="headerlink" title="协议概念"></a>协议概念</h1><p>HTTP 超文本传输协议 Hyper Text Transfer Protocol</p><p>协议就是不同的应用程序之间按照事先做好的约定进行的通信。</p><p>浏览器和WEB服务器之间，使用的就是一种叫做HTTP的协议。 这样是BS (Browser Server )架构模型的基础。</p><p>HTTP协议由请求和响应两种类型组成</p><p><img src="1.png" alt="1"></p><h1 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h1><p>对于HTTP协议的学习，我们将借助火狐浏览器FIREFOX的调试工具或者CHROME来实际观察浏览器和服务器之间传输数据的具体内容。</p><p>以Google Chrome浏览器为例。</p><p>快捷键 F12</p><p><img src="2.png" alt="2"></p><p>打开某个网页，就可以看到浏览器和服务器传输的协议内容了。</p><p><img src="3.png" alt="3"></p><h1 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h1><p>请求消息 由 请求行，请求头部，空行和请求数据4部分组成。</p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><p>打开网页 ，并新增一条数据</p><p>请求地址：<a href="http://www.sonder.icu/jsp6/dologin.jsp" target="_blank" rel="noopener">http://www.sonder.icu/jsp6/dologin.jsp</a></p><p>提交方式：POST</p><p><img src="4.png" alt="4"></p><h2 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h2><p>请求头部信息提供了如下信息:</p><p><img src="5.png" alt="5"></p><h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><p>提交的数据</p><p><img src="6.png" alt="6"></p><p>可以看到本次提交数据所传递的参数</p><p><img src="7.png" alt="7"></p><h1 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h1><p>响应信息由状态行，消息报头，响应正文组成。</p><h2 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h2><p>访问页面</p><p><img src="8.png" alt="8"></p><p>可以看到响应代码是 OK 200，即表示响应成功</p><p><img src="9.png" alt="9"></p><h2 id="消息报头"><a href="#消息报头" class="headerlink" title="消息报头"></a>消息报头</h2><p>消息报头中提供如下信息：</p><p>Content-Length: 表示长度</p><p>Content-Type: 内容格式</p><p>Date: 日期</p><p><img src="10.png" alt="10"></p><h2 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h2><p>如图所示，在响应正文里就会是具体的html内容了。</p><p>当然访问不同的页面，就不一定是html，有可能是css, js,甚至图片了。</p><p><img src="11.png" alt="11"></p><h1 id="响应代码"><a href="#响应代码" class="headerlink" title="响应代码"></a>响应代码</h1><p>各种页面跳转响应的代码。</p><h2 id="200"><a href="#200" class="headerlink" title="200"></a>200</h2><p>表示响应成功了，比如打开页面, 就会看到200响应码。</p><p><img src="9.png" alt="9"></p><h2 id="301"><a href="#301" class="headerlink" title="301"></a>301</h2><p>表示客户端跳转，永久性的跳转</p><h2 id="302"><a href="#302" class="headerlink" title="302"></a>302</h2><p>客户端跳转，临时性的跳转</p><h2 id="304"><a href="#304" class="headerlink" title="304"></a>304</h2><p>表示资源未被修改</p><p>当不是第一次访问一个静态页面或者图片的时候，就会得到这么一个提示。这是服务端提示浏览器，这个资源没有发生改变，你直接使用上一次下载的就行了，不需要重新下载。 这样就节约了带宽，并且浏览器的加载速度也更快。</p><h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><p>表示访问的页面不存在</p><p>这是一个不存在的页面，就会得到404响应码。<br>这表示一个浏览器的错误，就是服务端没提供这个服务，但是你却去访问。 这个锅要算到浏览器头上，不能算在服务器头上。</p><p>当然，有的时候是因为服务器没有配置这个路径，所以浏览器访问不到对应的资源。 </p><h2 id="500"><a href="#500" class="headerlink" title="500"></a>500</h2><p>表示服务端的错误</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个月的作品展示</title>
      <link href="/2020/03/10/%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
      <url>/2020/03/10/%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="用户登录jsp52"><a href="#用户登录jsp52" class="headerlink" title="用户登录jsp52"></a>用户登录jsp52</h1><p><img src="jsp521.png" alt="jsp521"><br>第一个发布到云服务器的Web项目，很简单，但是实现了最基础的用户登录的操作。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/jsp52/login.jsp" target="_blank" rel="noopener">地址</a>。</p><h1 id="用户登录升级版jsp6"><a href="#用户登录升级版jsp6" class="headerlink" title="用户登录升级版jsp6"></a>用户登录升级版jsp6</h1><p><img src="jsp6.png" alt="jsp6"><br>用户登录jsp52的升级版，样式比jsp52要好一点，不过也很简单。主要是加入了Cookie来保存用户的信息。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/jsp6/login.jsp" target="_blank" rel="noopener">地址</a>。</p><h1 id="香水perfume"><a href="#香水perfume" class="headerlink" title="香水perfume"></a>香水perfume</h1><p><img src="perfume.png" alt="perfume"><br>一个提供购买香水的网页，商品都是从数据库中调用。有购物车功能。是一个很完整也是目前最好的一个项目。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/perfume" target="_blank" rel="noopener">地址</a>。</p><h1 id="fruitProj水果摊"><a href="#fruitProj水果摊" class="headerlink" title="fruitProj水果摊"></a>fruitProj水果摊</h1><p><img src="fruitProj.png" alt="fruitProj水果摊"><br>一个简单的水果摊，与perfume首页商品展示的方法一样，只是商品数据不在数据库中，因此比较简单。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/fruitProj" target="_blank" rel="noopener">地址</a>。</p><h1 id="fruitProj2水果摊"><a href="#fruitProj2水果摊" class="headerlink" title="fruitProj2水果摊"></a>fruitProj2水果摊</h1><p><img src="fruitProj2.png" alt="fruitProj2水果摊"><br>fruitProj水果摊的升级版，使用老师发的样式模板，与perfume相似，只是少了很多后台操作。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/fruitProj2" target="_blank" rel="noopener">地址</a>。</p><h1 id="支援武汉新闻报道"><a href="#支援武汉新闻报道" class="headerlink" title="支援武汉新闻报道"></a>支援武汉新闻报道</h1><p><img src="wuhanjiayou.png" alt="新闻报道"><br>一则报道在这特殊期间的英雄事迹。声援武汉，加油中国。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/NewsReport" target="_blank" rel="noopener">地址</a>。</p><h1 id="初代blog"><a href="#初代blog" class="headerlink" title="初代blog"></a>初代blog</h1><p><img src="blog.png" alt="blog"><br>初代blog，特此纪念。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu" target="_blank" rel="noopener">地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 作品展示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> show </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat连接服务器MySQL遇到的问题</title>
      <link href="/2020/02/27/Navicat%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/27/Navicat%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在云服务器安装好MySQL之后，使用本地Navicat连接服务器的MySQL遇到的问题</p><h1 id="报2003错误"><a href="#报2003错误" class="headerlink" title="报2003错误"></a>报2003错误</h1><p><img src="1.png" alt="1"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>原因是没有开放云服务器的3306的端口</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>只要在控制台的安全组添加3306的安全组规则就可以了。</p><p><img src="2.png" alt="2"></p><p>加入安全组之后，确实不会报2003的错误了，但是又遇到了一个新的问题，报了1130的错误。</p><h1 id="报1130错误"><a href="#报1130错误" class="headerlink" title="报1130错误"></a>报1130错误</h1><p><img src="3.png" alt="3"></p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>出现这种情况是因为mysql服务器出于安全考虑，默认只允许本地登录数据库服务器。<br><img src="4.png" alt="4"></p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、先用use mysql;进入名字为mysql的数据库<br><img src="5.png" alt="5"></p><p>2、mysql&gt;update user set host=’%’ where host=’localhost’ and user=’root’;</p><p>3、mysql&gt;flush privileges;</p><p>4、使用查询语句查看是否修改过来：mysql&gt;select host,user from user;<br><img src="6.png" alt="6"></p><p>5、结果中若有，host为“%”的root用户，即可重启MySQL后直接在客户端连接即可成功。一定要重启！一定要重启！一定要重启！<br><img src="7.png" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java连接MySQL数据库——步骤和代码</title>
      <link href="/2020/02/26/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E6%AD%A5%E9%AA%A4%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/02/26/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E6%AD%A5%E9%AA%A4%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>工具：MySQL连接驱动：mysql-connector-java-5.1.27.jar</p><h1 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h1><h2 id="在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下"><a href="#在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下" class="headerlink" title="在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下"></a>在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下</h2><p><img src="1.png" alt="1"></p><h2 id="在java-build-path中的Libraries分页中选择Add-JARs…，选择刚才添加的JDBC"><a href="#在java-build-path中的Libraries分页中选择Add-JARs…，选择刚才添加的JDBC" class="headerlink" title="在java build path中的Libraries分页中选择Add JARs…，选择刚才添加的JDBC"></a>在java build path中的Libraries分页中选择Add JARs…，选择刚才添加的JDBC</h2><p><img src="2.png" alt="2"></p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="数据包准备：在数据库sqltestdb中创建如下数据表emp"><a href="#数据包准备：在数据库sqltestdb中创建如下数据表emp" class="headerlink" title="数据包准备：在数据库sqltestdb中创建如下数据表emp"></a>数据包准备：在数据库sqltestdb中创建如下数据表emp</h2><p><img src="3.png" alt="3"></p><h2 id="连接数据库并读取数据"><a href="#连接数据库并读取数据" class="headerlink" title="连接数据库并读取数据"></a>连接数据库并读取数据</h2><p><img src="4.png" alt="4"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="5.png" alt="5"></p><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><p><img src="6.png" alt="6"></p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p><img src="7.png" alt="7"></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p><img src="8.png" alt="8"></p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假JSP学习体会</title>
      <link href="/2020/02/23/%E5%AF%92%E5%81%87JSP%E5%AD%A6%E4%B9%A0%E4%BD%93%E4%BC%9A/"/>
      <url>/2020/02/23/%E5%AF%92%E5%81%87JSP%E5%AD%A6%E4%B9%A0%E4%BD%93%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>你们听说过大学生还有寒假作业吗，我没听说过，但是已经领教过了。我们老师在寒假开始前就在教学平台发布了大量作业，时间跨度大半个寒假。当然我还是紧跟着进度条的，眼看着要做完最后一个作业了。 万万没想到的是，进度条竟然学会了“自己长大”。不过现在呢，也习惯了。冷静想想，说实话寒假还是挺充实的。</p><p>以下就是跟着老师的脚步，在imooc上学习的课程。</p><p><img src="1.png" alt="学习的课程1"></p><p><img src="2.png" alt="学习的课程2"></p><p><img src="3.png" alt="学习的课程3"></p><p>emm..感觉上是收获满满。但说句实话，这些知识只能说是有印象，掌握还是谈不上的。既然是要展示的，那就再加一句官方点的话。好好学习，天天向上！</p>]]></content>
      
      
      <categories>
          
          <category> feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习体会 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
