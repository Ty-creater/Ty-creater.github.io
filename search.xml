<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PyInstaller安装和使用教程</title>
      <link href="/2020/03/16/PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/03/16/PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PyInstalle的功能"><a href="#PyInstalle的功能" class="headerlink" title="PyInstalle的功能"></a>PyInstalle的功能</h1><p>在创建了独立应用（自包含该应用的依赖包）之后，还可以使用 PyInstaller 将 Python 程序生成可直接运行的程序，这个程序就可以被分发到对应的 Windows 或 Mac OS X 平台上运行。</p><h1 id="安装-PyInstalle"><a href="#安装-PyInstalle" class="headerlink" title="安装 PyInstalle"></a>安装 PyInstalle</h1><p>安装 PyInstaller 模块与安装其他 Python 模块一样，使用 pip 命令安装即可。在命令行输入如下命令：</p><p><code>pip install pyinstaller</code></p><p>但是在国内使用pip在线安装的方式实在是太慢了，不仅浪费时间，还有可能报超时的错误，就像这样：</p><p>raise ReadTimeoutError(self._pool, None, “Read timed out.”)<br>pip._vendor.urllib3.exceptions.ReadTimeoutError:<br>HTTPSConnectionPool(host=’files<br>.pythonhosted.org’, port=443): Read timed out.</p><p>为了愉快的下载，我们可以把PIP安装源替换成国内镜像，这样一来就可以大幅提升下载速度，还可以提高安装成功率。</p><p>国内源：</p><ul><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple</a></li><li>华中理工大学：<a href="http://pypi.hustunique.com" target="_blank" rel="noopener">http://pypi.hustunique.com</a></li><li>山东理工大学：<a href="http://pypi.sdutlinux.org" target="_blank" rel="noopener">http://pypi.sdutlinux.org</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a></li></ul><p>使用方法：</p><p>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyinstaller</code></p><p>运行上面命令，应该看到如下输出结果：</p><p><code>Successfully installed pyinstaller-x.x.x</code></p><p>安装目录就在你python安装下的$\color{blue}{Scripts}$文件夹下。</p><p>我在安装的时候遇到了个小插曲：</p><p>WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.<br>You should consider upgrading via the ‘python -m pip install—upgrade pip’ command.</p><p>这里报的错误就是PIP要更新才能进行pyinstaller的安装，只需在安装第三方库前更新PIP就可以。</p><p><code>python -m pip install --upgrade pip</code></p><h1 id="PyInstaller-常用选项"><a href="#PyInstaller-常用选项" class="headerlink" title="PyInstaller 常用选项"></a>PyInstaller 常用选项</h1><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">-h</td><td style="text-align:left">查看帮助</td></tr><tr><td style="text-align:left">—clean</td><td style="text-align:left">清理打包过程中的临时文件</td></tr><tr><td style="text-align:left">-D，—onedir</td><td style="text-align:left">默认值，生成dist文件夹</td></tr><tr><td style="text-align:left">-F，-onefile</td><td style="text-align:left">在dist文件夹中只生成独立的打包文件</td></tr><tr><td style="text-align:left">-i&lt;图标文件名.ico&gt;</td><td style="text-align:left">指定打包程序使用的图标（icon）文件</td></tr></tbody></table></div><h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><p>用命令行工具cmd进入到要做成exe的文件目录下，执行如下命令：</p><p><code>pyinstaller -i cool.ico -F KochDraw.py</code></p><p>cool.ico是文件生成所用的图标，KochDraw.py是用turtle画的科赫雪花python文件。</p><p><img src="1.png" alt="1"></p><p><img src="2.png" alt="2"></p><p>在上面命令中使用了-F 选项，该选项指定生成单独的 EXE 文件，因此，在 dist 目录下生成了一个单独的KochDraw.exe 文件；与 -F 选项对应的是 -D 选项（默认选项），该选项指定生成一个目录（包含多个文件）来作为程序。</p><p><img src="3.png" alt="3"></p><p>效果如下：</p><p><img src="4.png" alt="4"></p><p>Python也可以用作后端开发，但是相比于php和java，python在开发效率上并没有大幅度提升。因此，php和java还是霸占着后端编程领域。不过呢，也是可以去试一试的。</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议学习小记</title>
      <link href="/2020/03/11/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
      <url>/2020/03/11/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="协议概念"><a href="#协议概念" class="headerlink" title="协议概念"></a>协议概念</h1><p>HTTP 超文本传输协议 Hyper Text Transfer Protocol</p><p>协议就是不同的应用程序之间按照事先做好的约定进行的通信。</p><p>浏览器和WEB服务器之间，使用的就是一种叫做HTTP的协议。 这样是BS (Browser Server )架构模型的基础。</p><p>HTTP协议由请求和响应两种类型组成</p><p><img src="1.png" alt="1"></p><h1 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h1><p>对于HTTP协议的学习，我们将借助火狐浏览器FIREFOX的调试工具或者CHROME来实际观察浏览器和服务器之间传输数据的具体内容。</p><p>以Google Chrome浏览器为例。</p><p>快捷键 F12</p><p><img src="2.png" alt="2"></p><p>打开某个网页，就可以看到浏览器和服务器传输的协议内容了。</p><p><img src="3.png" alt="3"></p><h1 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h1><p>请求消息 由 请求行，请求头部，空行和请求数据4部分组成。</p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>打开网页 ，并新增一条数据</p><p>请求地址：<a href="http://www.sonder.icu/jsp6/dologin.jsp" target="_blank" rel="noopener">http://www.sonder.icu/jsp6/dologin.jsp</a></p><p>提交方式：POST</p><p><img src="4.png" alt="4"></p><h3 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h3><p>请求头部信息提供了如下信息:</p><p><img src="5.png" alt="5"></p><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p>提交的数据</p><p><img src="6.png" alt="6"></p><p>可以看到本次提交数据所传递的参数</p><p><img src="7.png" alt="7"></p><h1 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h1><p>响应信息由状态行，消息报头，响应正文组成。</p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>访问页面</p><p><img src="8.png" alt="8"></p><p>可以看到响应代码是 OK 200，即表示响应成功</p><p><img src="9.png" alt="9"></p><h3 id="消息报头"><a href="#消息报头" class="headerlink" title="消息报头"></a>消息报头</h3><p>消息报头中提供如下信息：</p><p>Content-Length: 表示长度</p><p>Content-Type: 内容格式</p><p>Date: 日期</p><p><img src="10.png" alt="10"></p><h3 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h3><p>如图所示，在响应正文里就会是具体的html内容了。</p><p>当然访问不同的页面，就不一定是html，有可能是css, js,甚至图片了。</p><p><img src="11.png" alt="11"></p><h1 id="响应代码"><a href="#响应代码" class="headerlink" title="响应代码"></a>响应代码</h1><p>各种页面跳转响应的代码。</p><h3 id="200"><a href="#200" class="headerlink" title="200"></a>200</h3><p>表示响应成功了，比如打开页面, 就会看到200响应码。</p><p><img src="9.png" alt="9"></p><h3 id="301"><a href="#301" class="headerlink" title="301"></a>301</h3><p>表示客户端跳转，永久性的跳转</p><h3 id="302"><a href="#302" class="headerlink" title="302"></a>302</h3><p>客户端跳转，临时性的跳转</p><h3 id="304"><a href="#304" class="headerlink" title="304"></a>304</h3><p>表示资源未被修改</p><p>当不是第一次访问一个静态页面或者图片的时候，就会得到这么一个提示。这是服务端提示浏览器，这个资源没有发生改变，你直接使用上一次下载的就行了，不需要重新下载。 这样就节约了带宽，并且浏览器的加载速度也更快。</p><h3 id="404"><a href="#404" class="headerlink" title="404"></a>404</h3><p>表示访问的页面不存在</p><p>这是一个不存在的页面，就会得到404响应码。<br>这表示一个浏览器的错误，就是服务端没提供这个服务，但是你却去访问。 这个锅要算到浏览器头上，不能算在服务器头上。</p><p>当然，有的时候是因为服务器没有配置这个路径，所以浏览器访问不到对应的资源。 </p><h3 id="500"><a href="#500" class="headerlink" title="500"></a>500</h3><p>表示服务端的错误</p><h3 id="更多代码一一览。。。"><a href="#更多代码一一览。。。" class="headerlink" title="更多代码一一览。。。"></a>更多代码一一览。。。</h3>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个月的作品展示</title>
      <link href="/2020/03/10/%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
      <url>/2020/03/10/%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="用户登录jsp52"><a href="#用户登录jsp52" class="headerlink" title="用户登录jsp52"></a>用户登录jsp52</h1><p><img src="jsp521.png" alt="jsp521"><br>第一个发布到云服务器的Web项目，很简单，但是实现了最基础的用户登录的操作。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/jsp52/login.jsp" target="_blank" rel="noopener">地址</a>。</p><h1 id="用户登录升级版jsp6"><a href="#用户登录升级版jsp6" class="headerlink" title="用户登录升级版jsp6"></a>用户登录升级版jsp6</h1><p><img src="jsp6.png" alt="jsp6"><br>用户登录jsp52的升级版，样式比jsp52要好一点，不过也很简单。主要是加入了Cookie来保存用户的信息。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/jsp6/login.jsp" target="_blank" rel="noopener">地址</a>。</p><h1 id="香水perfume"><a href="#香水perfume" class="headerlink" title="香水perfume"></a>香水perfume</h1><p><img src="perfume.png" alt="perfume"><br>一个提供购买香水的网页，商品都是从数据库中调用。有购物车功能。是一个很完整也是目前最好的一个项目。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/perfume" target="_blank" rel="noopener">地址</a>。</p><h1 id="fruitProj水果摊"><a href="#fruitProj水果摊" class="headerlink" title="fruitProj水果摊"></a>fruitProj水果摊</h1><p><img src="fruitProj.png" alt="fruitProj水果摊"><br>一个简单的水果摊，与perfume首页商品展示的方法一样，只是商品数据不在数据库中，因此比较简单。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/fruitProj" target="_blank" rel="noopener">地址</a>。</p><h1 id="fruitProj2水果摊"><a href="#fruitProj2水果摊" class="headerlink" title="fruitProj2水果摊"></a>fruitProj2水果摊</h1><p><img src="fruitProj2.png" alt="fruitProj2水果摊"><br>fruitProj水果摊的升级版，使用老师发的样式模板，与perfume相似，只是少了很多后台操作。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/fruitProj2" target="_blank" rel="noopener">地址</a>。</p><h1 id="支援武汉新闻报道"><a href="#支援武汉新闻报道" class="headerlink" title="支援武汉新闻报道"></a>支援武汉新闻报道</h1><p><img src="wuhanjiayou.png" alt="新闻报道"><br>一则报道在这特殊期间的英雄事迹。声援武汉，加油中国。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu/NewsReport" target="_blank" rel="noopener">地址</a>。</p><h1 id="初代blog"><a href="#初代blog" class="headerlink" title="初代blog"></a>初代blog</h1><p><img src="blog.png" alt="blog"><br>初代blog，特此纪念。</p><p>如果你感兴趣，可以访问该<a href="http://www.sonder.icu" target="_blank" rel="noopener">地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 作品展示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> show </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat连接服务器MySQL遇到的问题</title>
      <link href="/2020/02/27/Navicat%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/27/Navicat%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8MySQL%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在云服务器安装好MySQL之后，使用本地Navicat连接服务器的MySQL遇到的问题</p><h1 id="报2003错误"><a href="#报2003错误" class="headerlink" title="报2003错误"></a>报2003错误</h1><p><img src="1.png" alt="1"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>原因是没有开放云服务器的3306的端口</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>只要在控制台的安全组添加3306的安全组规则就可以了。</p><p><img src="2.png" alt="2"></p><p>加入安全组之后，确实不会报2003的错误了，但是又遇到了一个新的问题，报了1130的错误。</p><h1 id="报1130错误"><a href="#报1130错误" class="headerlink" title="报1130错误"></a>报1130错误</h1><p><img src="3.png" alt="3"></p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>出现这种情况是因为mysql服务器出于安全考虑，默认只允许本地登录数据库服务器。<br><img src="4.png" alt="4"></p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、先用use mysql;进入名字为mysql的数据库<br><img src="5.png" alt="5"></p><p>2、mysql&gt;update user set host=’%’ where host=’localhost’ and user=’root’;</p><p>3、mysql&gt;flush privileges;</p><p>4、使用查询语句查看是否修改过来：mysql&gt;select host,user from user;<br><img src="6.png" alt="6"></p><p>5、结果中若有，host为“%”的root用户，即可重启MySQL后直接在客户端连接即可成功。一定要重启！一定要重启！一定要重启！<br><img src="7.png" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java连接MySQL数据库——步骤和代码</title>
      <link href="/2020/02/26/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E6%AD%A5%E9%AA%A4%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/02/26/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E2%80%94%E2%80%94%E6%AD%A5%E9%AA%A4%E5%92%8C%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>工具：MySQL连接驱动：mysql-connector-java-5.1.27.jar</p><h1 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h1><h2 id="在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下"><a href="#在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下" class="headerlink" title="在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下"></a>在工程目录中找到lib文件夹，将下载好的JDBC放到该文件夹下</h2><p><img src="1.png" alt="1"></p><h2 id="在java-build-path中的Libraries分页中选择Add-JARs…，选择刚才添加的JDBC"><a href="#在java-build-path中的Libraries分页中选择Add-JARs…，选择刚才添加的JDBC" class="headerlink" title="在java build path中的Libraries分页中选择Add JARs…，选择刚才添加的JDBC"></a>在java build path中的Libraries分页中选择Add JARs…，选择刚才添加的JDBC</h2><p><img src="2.png" alt="2"></p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><h2 id="数据包准备：在数据库sqltestdb中创建如下数据表emp"><a href="#数据包准备：在数据库sqltestdb中创建如下数据表emp" class="headerlink" title="数据包准备：在数据库sqltestdb中创建如下数据表emp"></a>数据包准备：在数据库sqltestdb中创建如下数据表emp</h2><p><img src="3.png" alt="3"></p><h2 id="连接数据库并读取数据"><a href="#连接数据库并读取数据" class="headerlink" title="连接数据库并读取数据"></a>连接数据库并读取数据</h2><p><img src="4.png" alt="4"></p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="5.png" alt="5"></p><h2 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h2><p><img src="6.png" alt="6"></p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p><img src="7.png" alt="7"></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p><img src="8.png" alt="8"></p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假JSP学习体会</title>
      <link href="/2020/02/23/%E5%AF%92%E5%81%87JSP%E5%AD%A6%E4%B9%A0%E4%BD%93%E4%BC%9A/"/>
      <url>/2020/02/23/%E5%AF%92%E5%81%87JSP%E5%AD%A6%E4%B9%A0%E4%BD%93%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>你们听说过大学生还有寒假作业吗，我没听说过，但是已经领教过了。我们老师在寒假开始前就在教学平台发布了大量作业，时间跨度大半个寒假。当然我还是紧跟着进度条的，眼看着要做完最后一个作业了。 万万没想到的是，进度条竟然学会了“自己长大”。不过现在呢，也习惯了。冷静想想，说实话寒假还是挺充实的。</p><p>以下就是跟着老师的脚步，在imooc上学习的课程。</p><p><img src="1.png" alt="学习的课程1"></p><p><img src="2.png" alt="学习的课程2"></p><p><img src="3.png" alt="学习的课程3"></p><p>emm..感觉上是收获满满。但说句实话，这些知识只能说是有印象，掌握还是谈不上的。既然是要展示的，那就再加一句官方点的话。好好学习，天天向上！</p>]]></content>
      
      
      <categories>
          
          <category> feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习体会 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
